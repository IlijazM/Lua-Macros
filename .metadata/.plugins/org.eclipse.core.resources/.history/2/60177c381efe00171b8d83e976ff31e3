package lua;

import macro.Macro;

public class Lua {
	
	public static void runLua(String path) {
		
	}

	public static void runAll() {
		for (int i = 0; i < Macro.macroPaths.size(); i++) {
			runLua(Macro.macroPaths.get(i));
		}
	}
	
	static void readInputJava(Process process, boolean mode) throws IOException {
		InputStream is = process.getInputStream();
		InputStreamReader isr = new InputStreamReader(is);
		BufferedReader br = new BufferedReader(isr);

		String line = null;

		while ((line = br.readLine()) != null) {
			Task.doTask(line, mode);
		}
	}

	static void readErrJava(Process process) throws IOException {
		InputStream is = process.getErrorStream();
		InputStreamReader isr = new InputStreamReader(is);
		BufferedReader br = new BufferedReader(isr);

		String line = null;

		while ((line = br.readLine()) != null) {
			System.err.println(line);
		}
	}

	static void readInputSH(String output, boolean mode) {
		String[] lines = output.split(System.lineSeparator());

		for (String line : lines) {
			Task.doTask(line, mode);
		}
	}

	static void readErrSH(String output) {
		String[] linesArray = output.split(System.lineSeparator());

		ArrayList<String> lines = new ArrayList<>();

		for (String line : linesArray) {
			lines.add(line);
		}

		for (int i = 0; i < lines.size(); i++) {
			for (Task task : Task.tasks) {
				if (lines.get(i).startsWith(task.name())) {
					lines.remove(i);
					i--;
					break;
				}
			}
		}

		String error = "";

		for (String line : lines) {
			error += line + System.lineSeparator();
		}

		System.err.print(error);
	}
	
}
