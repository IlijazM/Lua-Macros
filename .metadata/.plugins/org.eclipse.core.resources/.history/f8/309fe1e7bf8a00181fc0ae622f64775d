package lua;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;

import macro.Macro;
import main.KeyboardEvent;
import me.bleuzen.javux.Javux;
import me.bleuzen.javux.ProcessResult;
import me.bleuzen.javux.Script;
import me.bleuzen.javux.ScriptInterpreter;
import task.Task;

public abstract class Lua {
	
	private static Lua hotkey;
	private static Lua initLua;
	
	protected static int i;
	
	public static void init() {
		hotkey = new Hotkey();
		initLua = new InitLua();
		
		initAll();
	}
	
	public static void initAll() {
		for (i = 0; i < Macro.luaMacros.size(); i++) {
			initLua.runLua(Macro.luaMacros.get(i).path, "");
		}
	}
	
	public static void runAll() {
		runAll("");
	}
	
	public static void runAll(String inputstring) {
		KeyboardEvent.listen = false;
		
		for (i = 0; i < Macro.luaMacros.size(); i++) {
			if (Macro.luaMacros.get(i).keyCode == 0 || KeyboardEvent.keyStatus[Macro.luaMacros.get(i).keyCode])
			{
				System.out.println(KeyboardEvent.keyStatus[Macro.luaMacros.get(i).keyCode]);
				hotkey.runLua(Macro.luaMacros.get(i).path, inputstring);
			}
		}
		
		// enable listener
		
		new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				KeyboardEvent.listen = true;
			}
		}).start();;
		
	}
	
	public void runLua(String path, String inputstring) {
		boolean fromKey = inputstring.isEmpty();
		
		String command = "lua " + GetLuaInterpreterFile() + ".lua \"" + path + "\" \"" + inputstring + "\" \"";

		for (int i = 0; i < KeyboardEvent.keyStatus.length; i++) {
			if (KeyboardEvent.keyStatus[i]) {
				command += "1";
			} else {
				command += "0";
			}
		}

		command += "\"";
		
		try {
			if(Javux.isLinux) {
				Script script = new Script(ScriptInterpreter.SH);
				script.addLine(command);

				ProcessResult result = script.exec();

				// TODO: add wait

				String output = result.getOutput();

				readInputSH(output, fromKey);

				if (result.getExitCode() == 1) {
					readErrSH(output);
				}
			} else {
				Process process = Runtime.getRuntime().exec(command);

				readInputJava(process, fromKey);
				readErrJava(process);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void readInputJava(Process process, boolean mode) throws IOException {
		InputStream is = process.getInputStream();
		InputStreamReader isr = new InputStreamReader(is);
		BufferedReader br = new BufferedReader(isr);

		String line = null;

		while ((line = br.readLine()) != null) {
			read(line, mode);
		}
	}

	private void readErrJava(Process process) throws IOException {
		InputStream is = process.getErrorStream();
		InputStreamReader isr = new InputStreamReader(is);
		BufferedReader br = new BufferedReader(isr);

		String line = null;

		while ((line = br.readLine()) != null) {
			System.err.println(line);
		}
	}

	private void readInputSH(String output, boolean mode) {
		String[] lines = output.split(System.lineSeparator());

		for (String line : lines) {
			read(line, mode);
		}
	}

	private void readErrSH(String output) {
		String[] linesArray = output.split(System.lineSeparator());

		ArrayList<String> lines = new ArrayList<>();

		for (String line : linesArray) {
			lines.add(line);
		}

		for (int i = 0; i < lines.size(); i++) {
			for (Task task : Task.tasks) {
				if (lines.get(i).startsWith(task.name())) {
					lines.remove(i);
					i--;
					break;
				}
			}
		}

		String error = "";

		for (String line : lines) {
			error += line + System.lineSeparator();
		}

		System.err.print(error);
	}
	
	public abstract String GetLuaInterpreterFile();
	
	public abstract void read(String line, boolean mode);
}
